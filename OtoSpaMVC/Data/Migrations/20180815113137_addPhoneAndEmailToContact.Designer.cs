// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OtoSpaMVC.Data;

namespace OtoSpaMVC.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180815113137_addPhoneAndEmailToContact")]
    partial class addPhoneAndEmailToContact
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "admin_ID_123456789", AccessFailedCount = 0, ConcurrencyStamp = "223e2976-11ce-4f29-8c64-8db9ca765d26", Email = "admin@oto.spa", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEC7Usgt8bOypNyP/Uz669CaHKJDSiqGotea0gF+LeNDVnd5Pn3Lm4e6d7TXAgMK5LQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "admin" },
                        new { Id = "rt_7000", AccessFailedCount = 0, ConcurrencyStamp = "246f0d55-70ce-4c63-ba96-9af937f5eeb7", Email = "rt_7000@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEOvANMUSj6qBUPNq0k3j+ZtBxS6qrOPOJJy+cXVnzdwgeVEXdcg2gAJesU6LMt7gKQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7000" },
                        new { Id = "rt_7001", AccessFailedCount = 0, ConcurrencyStamp = "51cd722b-9145-4802-8942-4f13095ce4d6", Email = "rt_7001@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEKzfxePZHlX+xZIMBPMDsXmhLIpLRqTdBs8GO8bU5vsZjN7TBC9VLmlrSRRp9PX+jg==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7001" },
                        new { Id = "rt_7002", AccessFailedCount = 0, ConcurrencyStamp = "880c0899-f4b3-46f0-9710-05959780638d", Email = "rt_7002@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEGJ4uNrHyta1USuFlGZEYpyWQJtbCbCzZ2v6NWF72H1iqBgXd7C1GBBfJ2bFQXgDlQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7002" },
                        new { Id = "rt_7003", AccessFailedCount = 0, ConcurrencyStamp = "6d713fbd-6b45-4d6f-9c32-c9df9d5326e3", Email = "rt_7003@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEPLWIb76YBDUk9EN03OL/4VLXwQftdq/pbatPyRhEidXSocFtCdQ53OZIQRicNgbdQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7003" },
                        new { Id = "rt_7004", AccessFailedCount = 0, ConcurrencyStamp = "747c73b7-8980-4a47-a4cb-680c879cab91", Email = "rt_7004@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAECouQkHORxYBR/FehUSZFVFOLsNYGtVyx/DttzsFK1nP4OeP5h1yjuubGHjHT7rejA==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7004" },
                        new { Id = "rt_7005", AccessFailedCount = 0, ConcurrencyStamp = "4efe1093-368b-4890-975e-b306e087d648", Email = "rt_7005@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEMwoEZP26mIkXPsdhwBgYvqgR04lB4i3x/EP3Yjf5+6TM5NQZVxSISVdY9fFSwyL9Q==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7005" },
                        new { Id = "rt_7006", AccessFailedCount = 0, ConcurrencyStamp = "658f0d98-e847-44ec-b46b-927f75ec86af", Email = "rt_7006@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEElICzmQCTZftcs8ZuO4JQoL4ntaCkEeqkfCxyOwSrfpoY4KQPV02s1vTRClZiwEig==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7006" },
                        new { Id = "rt_7007", AccessFailedCount = 0, ConcurrencyStamp = "1594bc74-84d3-4caa-b8cd-e2d6db742ec3", Email = "rt_7007@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEKsVjPmK75oJycpBpgSce/j4Rbc7yBgh9Gl2hPSlSF6OSBKKlTYvtviQCmCDAMphPQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7007" },
                        new { Id = "rt_7008", AccessFailedCount = 0, ConcurrencyStamp = "240b0821-6a3b-43b5-9a57-6a03e85cde6e", Email = "rt_7008@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEAoVHX5/dCb7oATOWVBpbK9nB1nUtuysu6feeaEPJl/4sCvnecMGQ7gilaWgYIXvPg==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7008" },
                        new { Id = "rt_7009", AccessFailedCount = 0, ConcurrencyStamp = "95c45c8e-8d1b-44eb-aaa8-4e49179e4e0b", Email = "rt_7009@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEOcdxcG16mevfizQgQtCqUXa31f3ScHfEK78dMw0lNWe4zOSYW/jyZV8tJu3ReIQnA==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7009" },
                        new { Id = "rt_7010", AccessFailedCount = 0, ConcurrencyStamp = "ac2044ab-82c8-4fb5-a883-d70ab4deffea", Email = "rt_7010@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEBMWforxYF+GkQ/TdhuZoHifPCcr2zxwLM8Rhi2rAfjgQ2I2aEg72fX4yJ3L/B9vHA==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7010" },
                        new { Id = "rt_7011", AccessFailedCount = 0, ConcurrencyStamp = "be2b3a92-52e7-430e-9538-d6309de2ff7d", Email = "rt_7011@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAECpoTAclVSMPYvlTQWI7wHzrNytb+NtMlbn1/dZ9OkR3H+GR4innGTpo1kOmbb+RtA==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7011" },
                        new { Id = "rt_7012", AccessFailedCount = 0, ConcurrencyStamp = "c7c224bc-fc1d-4ac7-88fe-cb18c932436b", Email = "rt_7012@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEPGOojMpwormHgwaLWK+WjnSLZ2SYmXymL8Z6ar0JEpACN4agSNjLRnw8yWeRzaCVQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7012" },
                        new { Id = "rt_7013", AccessFailedCount = 0, ConcurrencyStamp = "9bd82016-1229-4fa7-bed6-eebd29a1ea79", Email = "rt_7013@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEOiIFUhrUpXTkR6DY8Fo0Ow/zUCsDs/oaj97+jogLTk95CFxTZZHThQCDFKgh1zB9w==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7013" },
                        new { Id = "rt_7014", AccessFailedCount = 0, ConcurrencyStamp = "35cb3260-13a5-4e02-a150-b1c9c220e543", Email = "rt_7014@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEHuPtw+KvO+nGCQzdpXB995r8o+0Qiht0fIx9UpcLsHlVOW2qwjGLG+lZ/AcqWUYaw==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7014" },
                        new { Id = "rt_7015", AccessFailedCount = 0, ConcurrencyStamp = "1b465475-7534-4030-988d-fe60c95e8ea0", Email = "rt_7015@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEJ2WkhCBY/uMvaC6rv2Ude+kkuNxUJZ2Es8HtawUiFTxLTM4cr5NysSxmASp0rfRVg==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7015" },
                        new { Id = "rt_7016", AccessFailedCount = 0, ConcurrencyStamp = "c94e0f2d-8980-4747-807b-2d67bf2a5761", Email = "rt_7016@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAENaJRR+h3H2YhoUz/dhpEvArOiZtBl+BVef/ejPNT2qQxmwMHuDu9A0P3S6RzHIaOw==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7016" },
                        new { Id = "rt_7017", AccessFailedCount = 0, ConcurrencyStamp = "6cc067f9-cf7c-4311-afa4-34055f0b4735", Email = "rt_7017@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEKU9BzOts0qOf+GO0oEkX4brICUyzE5ebkLH2ak71zVO8IddtP5jKGQugKyDCcT5Gw==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7017" },
                        new { Id = "rt_7018", AccessFailedCount = 0, ConcurrencyStamp = "33ce1abb-8b81-4ab5-92bd-a8bb7aeb94f6", Email = "rt_7018@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAECW2wlYYC1Ow02cOGjxm6/wjlLxI2a3rPy85CwaBd5H6qdg0hLQc8mGAdRyn2Ru1mA==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7018" },
                        new { Id = "rt_7019", AccessFailedCount = 0, ConcurrencyStamp = "e6d984cb-c911-485a-ae08-4fddccd3df00", Email = "rt_7019@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEPPFG8YYU7yX3IRz2nIyXBw72jhQj7+KcgOT/Lr+ksfEkB7zOwup/bqj87XMvMuAzg==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7019" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Editable");

                    b.Property<int>("Total");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Cart");

                    b.HasData(
                        new { ID = 13, Editable = true, Total = 2, UserID = "admin_ID_123456789" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Category");

                    b.HasData(
                        new { ID = 7, Name = "Car Accessories" },
                        new { ID = 8, Name = "Cleaning Products" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ContactUs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactHeader")
                        .HasMaxLength(160);

                    b.Property<string>("Content")
                        .HasMaxLength(160);

                    b.Property<string>("Email")
                        .HasMaxLength(20);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<bool>("Responded");

                    b.HasKey("ID");

                    b.ToTable("ContactUs");

                    b.HasData(
                        new { ID = 123, ContactHeader = "Hi", Content = "How Is Business Going?", Responded = false }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductName");

                    b.Property<double>("ProductPrice");

                    b.Property<string>("URIImage");

                    b.HasKey("ID");

                    b.ToTable("Product");

                    b.HasData(
                        new { ID = 1000, ProductName = "Prod_0", ProductPrice = 1081624743.0 },
                        new { ID = 1001, ProductName = "Prod_1", ProductPrice = 2032332745.0 },
                        new { ID = 1002, ProductName = "Prod_2", ProductPrice = 317369019.0 },
                        new { ID = 1003, ProductName = "Prod_3", ProductPrice = 856306849.0 },
                        new { ID = 1004, ProductName = "Prod_4", ProductPrice = 706859692.0 },
                        new { ID = 1005, ProductName = "Prod_5", ProductPrice = 1049885294.0 },
                        new { ID = 1006, ProductName = "Prod_6", ProductPrice = 258755297.0 },
                        new { ID = 1007, ProductName = "Prod_7", ProductPrice = 764177265.0 },
                        new { ID = 1008, ProductName = "Prod_8", ProductPrice = 290283375.0 },
                        new { ID = 1009, ProductName = "Prod_9", ProductPrice = 2041461062.0 },
                        new { ID = 1010, ProductName = "Prod_10", ProductPrice = 1607894116.0 },
                        new { ID = 1011, ProductName = "Prod_11", ProductPrice = 92664442.0 },
                        new { ID = 1012, ProductName = "Prod_12", ProductPrice = 821503192.0 },
                        new { ID = 1013, ProductName = "Prod_13", ProductPrice = 1448963099.0 },
                        new { ID = 1014, ProductName = "Prod_14", ProductPrice = 480715005.0 },
                        new { ID = 1015, ProductName = "Prod_15", ProductPrice = 1500693401.0 },
                        new { ID = 1016, ProductName = "Prod_16", ProductPrice = 507327281.0 },
                        new { ID = 1017, ProductName = "Prod_17", ProductPrice = 1213174665.0 },
                        new { ID = 1018, ProductName = "Prod_18", ProductPrice = 1408591821.0 },
                        new { ID = 1019, ProductName = "Prod_19", ProductPrice = 919124892.0 },
                        new { ID = 1020, ProductName = "Prod_20", ProductPrice = 1844974644.0 },
                        new { ID = 1021, ProductName = "Prod_21", ProductPrice = 441617661.0 },
                        new { ID = 1022, ProductName = "Prod_22", ProductPrice = 1884804385.0 },
                        new { ID = 1023, ProductName = "Prod_23", ProductPrice = 561929545.0 },
                        new { ID = 1024, ProductName = "Prod_24", ProductPrice = 1950778916.0 },
                        new { ID = 1025, ProductName = "Prod_25", ProductPrice = 1109330078.0 },
                        new { ID = 1026, ProductName = "Prod_26", ProductPrice = 329114104.0 },
                        new { ID = 1027, ProductName = "Prod_27", ProductPrice = 1537738978.0 },
                        new { ID = 1028, ProductName = "Prod_28", ProductPrice = 204084271.0 },
                        new { ID = 1029, ProductName = "Prod_29", ProductPrice = 761120724.0 },
                        new { ID = 1030, ProductName = "Prod_30", ProductPrice = 803604893.0 },
                        new { ID = 1031, ProductName = "Prod_31", ProductPrice = 22823925.0 },
                        new { ID = 1032, ProductName = "Prod_32", ProductPrice = 1983474675.0 },
                        new { ID = 1033, ProductName = "Prod_33", ProductPrice = 581649007.0 },
                        new { ID = 1034, ProductName = "Prod_34", ProductPrice = 965391719.0 },
                        new { ID = 1035, ProductName = "Prod_35", ProductPrice = 1207735070.0 },
                        new { ID = 1036, ProductName = "Prod_36", ProductPrice = 22249297.0 },
                        new { ID = 1037, ProductName = "Prod_37", ProductPrice = 1631634623.0 },
                        new { ID = 1038, ProductName = "Prod_38", ProductPrice = 260538987.0 },
                        new { ID = 1039, ProductName = "Prod_39", ProductPrice = 8937375.0 },
                        new { ID = 1040, ProductName = "Prod_40", ProductPrice = 1332525540.0 },
                        new { ID = 1041, ProductName = "Prod_41", ProductPrice = 632507896.0 },
                        new { ID = 1042, ProductName = "Prod_42", ProductPrice = 943146959.0 },
                        new { ID = 1043, ProductName = "Prod_43", ProductPrice = 426549017.0 },
                        new { ID = 1044, ProductName = "Prod_44", ProductPrice = 456785741.0 },
                        new { ID = 1045, ProductName = "Prod_45", ProductPrice = 928671474.0 },
                        new { ID = 1046, ProductName = "Prod_46", ProductPrice = 56677110.0 },
                        new { ID = 1047, ProductName = "Prod_47", ProductPrice = 287605787.0 },
                        new { ID = 1048, ProductName = "Prod_48", ProductPrice = 247971079.0 },
                        new { ID = 1049, ProductName = "Prod_49", ProductPrice = 1947830982.0 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Purchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartID");

                    b.Property<string>("CreditDetails");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("CartID");

                    b.HasIndex("UserID");

                    b.ToTable("Purchase");

                    b.HasData(
                        new { ID = 15, CartID = 13, CreditDetails = "YOOOLLLLOOOO", UserID = "admin_ID_123456789" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Rating", b =>
                {
                    b.Property<int>("ProductID");

                    b.Property<string>("UserID");

                    b.Property<int>("ID");

                    b.Property<int>("ProductRating");

                    b.HasKey("ProductID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Rating");

                    b.HasData(
                        new { ProductID = 1007, UserID = "rt_7000", ID = 7000, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7001", ID = 7001, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7002", ID = 7002, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7003", ID = 7003, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7004", ID = 7004, ProductRating = 5 },
                        new { ProductID = 1007, UserID = "rt_7005", ID = 7005, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7006", ID = 7006, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7007", ID = 7007, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7008", ID = 7008, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7009", ID = 7009, ProductRating = 5 },
                        new { ProductID = 1007, UserID = "rt_7010", ID = 7010, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7011", ID = 7011, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7012", ID = 7012, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7013", ID = 7013, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7014", ID = 7014, ProductRating = 5 },
                        new { ProductID = 1007, UserID = "rt_7015", ID = 7015, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7016", ID = 7016, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7017", ID = 7017, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7018", ID = 7018, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7019", ID = 7019, ProductRating = 5 },
                        new { ProductID = 111, UserID = "admin_ID_123456789", ID = 16, ProductRating = 1 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.SeconderyModels.CartItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("CartID");

                    b.Property<int>("ProductID");

                    b.HasKey("ID");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartItem");

                    b.HasData(
                        new { ID = 14, Amount = 1, CartID = 13, ProductID = 111 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.SeconderyModels.ProductCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryID");

                    b.Property<int>("ProductID");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductCategory");

                    b.HasData(
                        new { ID = 17, CategoryID = 7, ProductID = 222 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.SeconderyModels.ProductSupplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductID");

                    b.Property<int>("SupplierID");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SupplierID");

                    b.ToTable("ProductSupplier");

                    b.HasData(
                        new { ID = 18, ProductID = 111, SupplierID = 11 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Contact");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Website");

                    b.HasKey("ID");

                    b.ToTable("Supplier");

                    b.HasData(
                        new { ID = 11, Address = "lilach 99", Contact = "gil", Email = "gil@ziv.com", Name = "Guro", Phone = "054-9999999", Website = "www.anshubi.com" },
                        new { ID = 12, Address = "Aviv 99", Contact = "Zil", Email = "Ziv@Giv.com", Name = "Theuro", Phone = "054-9999199", Website = "www.tuna.com" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Cart", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Purchase", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Cart", "PurchaseCart")
                        .WithMany()
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Rating", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.ApplicationUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.SeconderyModels.CartItem", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.SeconderyModels.ProductCategory", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.SeconderyModels.ProductSupplier", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
