// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OtoSpaMVC.Data;

namespace OtoSpaMVC.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180818140217_setadmin")]
    partial class setadmin
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1", ConcurrencyStamp = "user", Name = "user", NormalizedName = "user" },
                        new { Id = "2", ConcurrencyStamp = "admin", Name = "admin", NormalizedName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "admin_ID_123456789", RoleId = "2" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "admin_ID_123456789", AccessFailedCount = 0, ConcurrencyStamp = "661c095c-d48e-452b-a70f-66120cdb877c", Email = "admin@oto.spa", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEBTJtmD9Tqh9D78sYABk5OQn6pjgU4hiFzrlfZ1xUob/9AN0FT9+lMuDFNNbmCYLYw==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "admin" },
                        new { Id = "rt_7000", AccessFailedCount = 0, ConcurrencyStamp = "0a9684b1-3e09-4e6b-98f3-865594382178", Email = "rt_7000@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEBlYSn04JDz4a3PC3jJkSJPnEmJz+tCMYNh+n6McvBC+FXMSafYphr8OytMTtRxmFQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7000" },
                        new { Id = "rt_7001", AccessFailedCount = 0, ConcurrencyStamp = "ebcbc23c-981b-4336-87a9-d03e8aa9fe3e", Email = "rt_7001@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEByxFPrN/28KH898WLkdiWaeS28bWKvHAoMAirAKx5N2D2s+KRvIAl3ixfPuAogzZA==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7001" },
                        new { Id = "rt_7002", AccessFailedCount = 0, ConcurrencyStamp = "de9e023e-5ada-4531-8a89-7bcb1e32ffaa", Email = "rt_7002@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAECw60vAlKBzQUZazR97YQSqGe2omW6JD27VNeZrLBIcet1XlmY4zfmVjGm7gem58CA==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7002" },
                        new { Id = "rt_7003", AccessFailedCount = 0, ConcurrencyStamp = "93e80809-8c7f-4416-8bf7-91e7af52512e", Email = "rt_7003@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEHGfaVhfwW+zWCITSYbMGQMRcJ69GfdW2WR6lr7l6MUjPXJRbcBQjwfcmyOiu7WDaQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7003" },
                        new { Id = "rt_7004", AccessFailedCount = 0, ConcurrencyStamp = "6bde7110-0e17-4f57-ad90-f74eac796c5c", Email = "rt_7004@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEE+y/DlvGHXgZRB4fCNcr9u8bDGOwZSCjbtCYUn/4SQIiZ8TZ7CwGclegw4hk5rQ1g==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7004" },
                        new { Id = "rt_7005", AccessFailedCount = 0, ConcurrencyStamp = "eba18b3c-523a-4bdc-8e2f-fcb8760abd33", Email = "rt_7005@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEGkYfD3PhsC37+joJdQ8QVKTHfiG3YsgQhhJEhgXeNNwYQlJ/9S8fx3B4XBhFrXUlQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7005" },
                        new { Id = "rt_7006", AccessFailedCount = 0, ConcurrencyStamp = "60a2aa66-03f1-4132-98d7-987c712daf07", Email = "rt_7006@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEAf1xI+KONBoqdY5OO5yEEg3PP7IBA7FPrTfKbXC0JOu4ppWiUroPro5k4jFE0HUvQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7006" },
                        new { Id = "rt_7007", AccessFailedCount = 0, ConcurrencyStamp = "ce3068d0-ed5c-4b1e-9a48-818005ac2dc3", Email = "rt_7007@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEH4UThjHW4A+B3MUulbskk6n1+MLW0QD7S5fCcqYP8UEIprwgSnGDCw0cMFluOOP4A==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7007" },
                        new { Id = "rt_7008", AccessFailedCount = 0, ConcurrencyStamp = "730d00b3-44f0-4936-b135-705c2d19284f", Email = "rt_7008@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEOM8lrnZxBy7Z8IzK2oP6HILCCMvDXBFhvbSuuz59F7KdyeCWyEip10oyIsiQvx7HQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7008" },
                        new { Id = "rt_7009", AccessFailedCount = 0, ConcurrencyStamp = "124454f4-7ebe-4392-be82-5c8e755e0f01", Email = "rt_7009@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEKK+vQXpvsJHP+QD06wE/g9kFrAmU+HzY3C73fl3MKm8Zdkz96d1X9OBCZt+/fsRVg==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7009" },
                        new { Id = "rt_7010", AccessFailedCount = 0, ConcurrencyStamp = "d098cca4-a3ec-40e7-a5d3-9ec67c636730", Email = "rt_7010@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEEygxLQuLh1I/HZpv4P2ZvDotjRxOsAaIKCkqMuoeOWzxA2Yo/xhyoQCSsRC7Pdlbg==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7010" },
                        new { Id = "rt_7011", AccessFailedCount = 0, ConcurrencyStamp = "91fa872b-f1d4-4663-b15a-5cce6f35648f", Email = "rt_7011@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEIzp24vKe8R6izi8HG+zQfVy/TFSrw7gmgm1vkAjip9vCIFAUCoxSsp54ncT7eUNaw==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7011" },
                        new { Id = "rt_7012", AccessFailedCount = 0, ConcurrencyStamp = "2fe2c393-535b-4d85-9d42-8667978843bf", Email = "rt_7012@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEF86VKP+JQvKDiKbOHFYYg7bOtw3Ohn1cP5VijaUg0WhN0u1hDJpZv1eZcgvHMmUdA==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7012" },
                        new { Id = "rt_7013", AccessFailedCount = 0, ConcurrencyStamp = "c663e7d7-ffba-45ad-947a-c1b21c3f82ef", Email = "rt_7013@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEOWvCzii1cs42sv4r3sUPUk8POrqM5bX/BaV+CmL17dfBL9AOCw6Gc/bfbPBrk43Wg==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7013" },
                        new { Id = "rt_7014", AccessFailedCount = 0, ConcurrencyStamp = "d5d03f8e-a61d-4120-8763-dcab147f8efd", Email = "rt_7014@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAELxZHWRaUnF9+So2RqODyGAtCok2MTsvEouVH2jQ7i+s+4zvjtTm5/gGM947KKOdzQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7014" },
                        new { Id = "rt_7015", AccessFailedCount = 0, ConcurrencyStamp = "71e69928-9dbf-4f63-8c31-cac77e6515a5", Email = "rt_7015@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAECGQfbrbhpAgmDsnlgpM2YMDzW9vkk60hhKdaEVGRI31JPCIDCQaRUjMfEhf/8h3Dg==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7015" },
                        new { Id = "rt_7016", AccessFailedCount = 0, ConcurrencyStamp = "8e005cbd-2d80-466f-bc42-b1096a1451f5", Email = "rt_7016@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEAQaSnB7ygTjFtkP3IW1C1l/umcNbjx0rex9z5lr2yY6S0yfByQvKMBpGoJhlMrZ6w==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7016" },
                        new { Id = "rt_7017", AccessFailedCount = 0, ConcurrencyStamp = "9155edfe-3198-48ca-a86b-38596fbc365d", Email = "rt_7017@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEK8qIF7VfkUIe0sjZx70gCz3PJKb6kL7a0hYPfRS6xb2ltz48KW5OJa6ioU3/i63jg==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7017" },
                        new { Id = "rt_7018", AccessFailedCount = 0, ConcurrencyStamp = "93638893-c7af-4ef3-b23b-e892c12f236a", Email = "rt_7018@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEFuYpDEjc0S4BEihp9xbdHzslvuOEeoo88Dj7XtzTEmS1V8Al/VOHk19125YGaCLjQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7018" },
                        new { Id = "rt_7019", AccessFailedCount = 0, ConcurrencyStamp = "203d6005-d270-4b55-aff9-d0c312a4a0d8", Email = "rt_7019@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEKQO/rqcynvtHs23amHcCEN7ftN8Nc5rGafgLSpsusZF6efXG/S067pscVUabtXj6g==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7019" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Editable");

                    b.Property<int>("Total");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Cart");

                    b.HasData(
                        new { ID = 13, Editable = true, Total = 2, UserID = "admin_ID_123456789" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.CartItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("CartID");

                    b.Property<int>("ProductID");

                    b.HasKey("ID");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartItem");

                    b.HasData(
                        new { ID = 14, Amount = 1, CartID = 13, ProductID = 111 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Category");

                    b.HasData(
                        new { ID = 500, Name = "PrimeCategory_0" },
                        new { ID = 501, Name = "PrimeCategory_1" },
                        new { ID = 502, Name = "PrimeCategory_2" },
                        new { ID = 503, Name = "PrimeCategory_3" },
                        new { ID = 504, Name = "PrimeCategory_4" },
                        new { ID = 7, Name = "Car Accessories" },
                        new { ID = 8, Name = "Cleaning Products" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ContactUs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ContactDate");

                    b.Property<string>("ContactHeader")
                        .HasMaxLength(160);

                    b.Property<string>("ContactName")
                        .HasMaxLength(15);

                    b.Property<string>("Content")
                        .HasMaxLength(160);

                    b.Property<string>("Email")
                        .HasMaxLength(20);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<bool>("Responded");

                    b.HasKey("ID");

                    b.ToTable("ContactUs");

                    b.HasData(
                        new { ID = 123, ContactDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ContactHeader = "Hi", Content = "How Is Business Going?", Responded = false }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PrimaryCategoryID");

                    b.Property<string>("ProductName");

                    b.Property<double>("ProductPrice");

                    b.Property<string>("URIImage");

                    b.HasKey("ID");

                    b.HasIndex("PrimaryCategoryID");

                    b.ToTable("Product");

                    b.HasData(
                        new { ID = 1000, PrimaryCategoryID = 500, ProductName = "Prod_0", ProductPrice = 40.0 },
                        new { ID = 1001, PrimaryCategoryID = 501, ProductName = "Prod_1", ProductPrice = 316.0 },
                        new { ID = 1002, PrimaryCategoryID = 502, ProductName = "Prod_2", ProductPrice = 402.0 },
                        new { ID = 1003, PrimaryCategoryID = 503, ProductName = "Prod_3", ProductPrice = 333.0 },
                        new { ID = 1004, PrimaryCategoryID = 504, ProductName = "Prod_4", ProductPrice = 436.0 },
                        new { ID = 1005, PrimaryCategoryID = 500, ProductName = "Prod_5", ProductPrice = 412.0 },
                        new { ID = 1006, PrimaryCategoryID = 501, ProductName = "Prod_6", ProductPrice = 363.0 },
                        new { ID = 1007, PrimaryCategoryID = 502, ProductName = "Prod_7", ProductPrice = 119.0 },
                        new { ID = 1008, PrimaryCategoryID = 503, ProductName = "Prod_8", ProductPrice = 241.0 },
                        new { ID = 1009, PrimaryCategoryID = 504, ProductName = "Prod_9", ProductPrice = 205.0 },
                        new { ID = 1010, PrimaryCategoryID = 500, ProductName = "Prod_10", ProductPrice = 216.0 },
                        new { ID = 1011, PrimaryCategoryID = 501, ProductName = "Prod_11", ProductPrice = 391.0 },
                        new { ID = 1012, PrimaryCategoryID = 502, ProductName = "Prod_12", ProductPrice = 426.0 },
                        new { ID = 1013, PrimaryCategoryID = 503, ProductName = "Prod_13", ProductPrice = 479.0 },
                        new { ID = 1014, PrimaryCategoryID = 504, ProductName = "Prod_14", ProductPrice = 250.0 },
                        new { ID = 1015, PrimaryCategoryID = 500, ProductName = "Prod_15", ProductPrice = 51.0 },
                        new { ID = 1016, PrimaryCategoryID = 501, ProductName = "Prod_16", ProductPrice = 201.0 },
                        new { ID = 1017, PrimaryCategoryID = 502, ProductName = "Prod_17", ProductPrice = 14.0 },
                        new { ID = 1018, PrimaryCategoryID = 503, ProductName = "Prod_18", ProductPrice = 391.0 },
                        new { ID = 1019, PrimaryCategoryID = 504, ProductName = "Prod_19", ProductPrice = 498.0 },
                        new { ID = 1020, PrimaryCategoryID = 500, ProductName = "Prod_20", ProductPrice = 200.0 },
                        new { ID = 1021, PrimaryCategoryID = 501, ProductName = "Prod_21", ProductPrice = 19.0 },
                        new { ID = 1022, PrimaryCategoryID = 502, ProductName = "Prod_22", ProductPrice = 493.0 },
                        new { ID = 1023, PrimaryCategoryID = 503, ProductName = "Prod_23", ProductPrice = 49.0 },
                        new { ID = 1024, PrimaryCategoryID = 504, ProductName = "Prod_24", ProductPrice = 74.0 },
                        new { ID = 1025, PrimaryCategoryID = 500, ProductName = "Prod_25", ProductPrice = 137.0 },
                        new { ID = 1026, PrimaryCategoryID = 501, ProductName = "Prod_26", ProductPrice = 239.0 },
                        new { ID = 1027, PrimaryCategoryID = 502, ProductName = "Prod_27", ProductPrice = 286.0 },
                        new { ID = 1028, PrimaryCategoryID = 503, ProductName = "Prod_28", ProductPrice = 90.0 },
                        new { ID = 1029, PrimaryCategoryID = 504, ProductName = "Prod_29", ProductPrice = 44.0 },
                        new { ID = 1030, PrimaryCategoryID = 500, ProductName = "Prod_30", ProductPrice = 384.0 },
                        new { ID = 1031, PrimaryCategoryID = 501, ProductName = "Prod_31", ProductPrice = 329.0 },
                        new { ID = 1032, PrimaryCategoryID = 502, ProductName = "Prod_32", ProductPrice = 111.0 },
                        new { ID = 1033, PrimaryCategoryID = 503, ProductName = "Prod_33", ProductPrice = 127.0 },
                        new { ID = 1034, PrimaryCategoryID = 504, ProductName = "Prod_34", ProductPrice = 304.0 },
                        new { ID = 1035, PrimaryCategoryID = 500, ProductName = "Prod_35", ProductPrice = 406.0 },
                        new { ID = 1036, PrimaryCategoryID = 501, ProductName = "Prod_36", ProductPrice = 483.0 },
                        new { ID = 1037, PrimaryCategoryID = 502, ProductName = "Prod_37", ProductPrice = 333.0 },
                        new { ID = 1038, PrimaryCategoryID = 503, ProductName = "Prod_38", ProductPrice = 419.0 },
                        new { ID = 1039, PrimaryCategoryID = 504, ProductName = "Prod_39", ProductPrice = 246.0 },
                        new { ID = 1040, PrimaryCategoryID = 500, ProductName = "Prod_40", ProductPrice = 27.0 },
                        new { ID = 1041, PrimaryCategoryID = 501, ProductName = "Prod_41", ProductPrice = 114.0 },
                        new { ID = 1042, PrimaryCategoryID = 502, ProductName = "Prod_42", ProductPrice = 131.0 },
                        new { ID = 1043, PrimaryCategoryID = 503, ProductName = "Prod_43", ProductPrice = 181.0 },
                        new { ID = 1044, PrimaryCategoryID = 504, ProductName = "Prod_44", ProductPrice = 139.0 },
                        new { ID = 1045, PrimaryCategoryID = 500, ProductName = "Prod_45", ProductPrice = 359.0 },
                        new { ID = 1046, PrimaryCategoryID = 501, ProductName = "Prod_46", ProductPrice = 183.0 },
                        new { ID = 1047, PrimaryCategoryID = 502, ProductName = "Prod_47", ProductPrice = 85.0 },
                        new { ID = 1048, PrimaryCategoryID = 503, ProductName = "Prod_48", ProductPrice = 209.0 },
                        new { ID = 1049, PrimaryCategoryID = 504, ProductName = "Prod_49", ProductPrice = 276.0 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ProductSupplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductID");

                    b.Property<int>("SupplierID");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SupplierID");

                    b.ToTable("ProductSupplier");

                    b.HasData(
                        new { ID = 18, ProductID = 111, SupplierID = 11 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Purchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreditDetails");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<double>("Total");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Purchase");

                    b.HasData(
                        new { ID = 9000, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7000" },
                        new { ID = 9001, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7001" },
                        new { ID = 9002, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7002" },
                        new { ID = 9003, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7003" },
                        new { ID = 9004, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7004" },
                        new { ID = 9005, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7005" },
                        new { ID = 9006, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7006" },
                        new { ID = 9007, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7007" },
                        new { ID = 9008, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7008" },
                        new { ID = 9009, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7009" },
                        new { ID = 9010, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7010" },
                        new { ID = 9011, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7011" },
                        new { ID = 9012, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7012" },
                        new { ID = 9013, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7013" },
                        new { ID = 9014, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7014" },
                        new { ID = 9015, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7015" },
                        new { ID = 9016, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7016" },
                        new { ID = 9017, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7017" },
                        new { ID = 9018, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7018" },
                        new { ID = 9019, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7019" },
                        new { ID = 15, CreditDetails = "YOOOLLLLOOOO", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "admin_ID_123456789" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.PurchaseItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("ProductID");

                    b.Property<int>("PurchaseID");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("PurchaseID");

                    b.ToTable("PurchaseItem");

                    b.HasData(
                        new { ID = 90000, Amount = 5, ProductID = 1011, PurchaseID = 9000 },
                        new { ID = 90001, Amount = 1, ProductID = 1049, PurchaseID = 9000 },
                        new { ID = 90002, Amount = 1, ProductID = 1038, PurchaseID = 9000 },
                        new { ID = 90010, Amount = 7, ProductID = 1031, PurchaseID = 9001 },
                        new { ID = 90011, Amount = 6, ProductID = 1026, PurchaseID = 9001 },
                        new { ID = 90012, Amount = 2, ProductID = 1017, PurchaseID = 9001 },
                        new { ID = 90020, Amount = 4, ProductID = 1003, PurchaseID = 9002 },
                        new { ID = 90021, Amount = 7, ProductID = 1031, PurchaseID = 9002 },
                        new { ID = 90022, Amount = 6, ProductID = 1028, PurchaseID = 9002 },
                        new { ID = 90030, Amount = 7, ProductID = 1017, PurchaseID = 9003 },
                        new { ID = 90031, Amount = 7, ProductID = 1005, PurchaseID = 9003 },
                        new { ID = 90032, Amount = 3, ProductID = 1008, PurchaseID = 9003 },
                        new { ID = 90040, Amount = 2, ProductID = 1048, PurchaseID = 9004 },
                        new { ID = 90041, Amount = 6, ProductID = 1038, PurchaseID = 9004 },
                        new { ID = 90042, Amount = 4, ProductID = 1040, PurchaseID = 9004 },
                        new { ID = 90050, Amount = 3, ProductID = 1045, PurchaseID = 9005 },
                        new { ID = 90051, Amount = 6, ProductID = 1007, PurchaseID = 9005 },
                        new { ID = 90052, Amount = 3, ProductID = 1041, PurchaseID = 9005 },
                        new { ID = 90060, Amount = 1, ProductID = 1032, PurchaseID = 9006 },
                        new { ID = 90061, Amount = 6, ProductID = 1023, PurchaseID = 9006 },
                        new { ID = 90062, Amount = 3, ProductID = 1008, PurchaseID = 9006 },
                        new { ID = 90070, Amount = 3, ProductID = 1006, PurchaseID = 9007 },
                        new { ID = 90071, Amount = 8, ProductID = 1006, PurchaseID = 9007 },
                        new { ID = 90072, Amount = 8, ProductID = 1007, PurchaseID = 9007 },
                        new { ID = 90080, Amount = 5, ProductID = 1035, PurchaseID = 9008 },
                        new { ID = 90081, Amount = 7, ProductID = 1007, PurchaseID = 9008 },
                        new { ID = 90082, Amount = 7, ProductID = 1039, PurchaseID = 9008 },
                        new { ID = 90090, Amount = 5, ProductID = 1021, PurchaseID = 9009 },
                        new { ID = 90091, Amount = 7, ProductID = 1017, PurchaseID = 9009 },
                        new { ID = 90092, Amount = 6, ProductID = 1006, PurchaseID = 9009 },
                        new { ID = 90100, Amount = 1, ProductID = 1013, PurchaseID = 9010 },
                        new { ID = 90101, Amount = 1, ProductID = 1045, PurchaseID = 9010 },
                        new { ID = 90102, Amount = 1, ProductID = 1035, PurchaseID = 9010 },
                        new { ID = 90110, Amount = 4, ProductID = 1049, PurchaseID = 9011 },
                        new { ID = 90111, Amount = 4, ProductID = 1028, PurchaseID = 9011 },
                        new { ID = 90112, Amount = 5, ProductID = 1005, PurchaseID = 9011 },
                        new { ID = 90120, Amount = 8, ProductID = 1007, PurchaseID = 9012 },
                        new { ID = 90121, Amount = 8, ProductID = 1025, PurchaseID = 9012 },
                        new { ID = 90122, Amount = 9, ProductID = 1029, PurchaseID = 9012 },
                        new { ID = 90130, Amount = 1, ProductID = 1008, PurchaseID = 9013 },
                        new { ID = 90131, Amount = 9, ProductID = 1001, PurchaseID = 9013 },
                        new { ID = 90132, Amount = 3, ProductID = 1046, PurchaseID = 9013 },
                        new { ID = 90140, Amount = 2, ProductID = 1013, PurchaseID = 9014 },
                        new { ID = 90141, Amount = 4, ProductID = 1025, PurchaseID = 9014 },
                        new { ID = 90142, Amount = 4, ProductID = 1009, PurchaseID = 9014 },
                        new { ID = 90150, Amount = 9, ProductID = 1044, PurchaseID = 9015 },
                        new { ID = 90151, Amount = 8, ProductID = 1048, PurchaseID = 9015 },
                        new { ID = 90152, Amount = 2, ProductID = 1014, PurchaseID = 9015 },
                        new { ID = 90160, Amount = 1, ProductID = 1017, PurchaseID = 9016 },
                        new { ID = 90161, Amount = 1, ProductID = 1026, PurchaseID = 9016 },
                        new { ID = 90162, Amount = 7, ProductID = 1044, PurchaseID = 9016 },
                        new { ID = 90170, Amount = 3, ProductID = 1014, PurchaseID = 9017 },
                        new { ID = 90171, Amount = 7, ProductID = 1019, PurchaseID = 9017 },
                        new { ID = 90172, Amount = 9, ProductID = 1030, PurchaseID = 9017 },
                        new { ID = 90180, Amount = 5, ProductID = 1010, PurchaseID = 9018 },
                        new { ID = 90181, Amount = 4, ProductID = 1045, PurchaseID = 9018 },
                        new { ID = 90182, Amount = 1, ProductID = 1026, PurchaseID = 9018 },
                        new { ID = 90190, Amount = 4, ProductID = 1028, PurchaseID = 9019 },
                        new { ID = 90191, Amount = 6, ProductID = 1003, PurchaseID = 9019 },
                        new { ID = 90192, Amount = 5, ProductID = 1041, PurchaseID = 9019 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Rating", b =>
                {
                    b.Property<int>("ProductID");

                    b.Property<string>("UserID");

                    b.Property<int>("ID");

                    b.Property<int>("ProductRating");

                    b.HasKey("ProductID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Rating");

                    b.HasData(
                        new { ProductID = 1007, UserID = "rt_7000", ID = 7000, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7001", ID = 7001, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7002", ID = 7002, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7003", ID = 7003, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7004", ID = 7004, ProductRating = 5 },
                        new { ProductID = 1007, UserID = "rt_7005", ID = 7005, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7006", ID = 7006, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7007", ID = 7007, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7008", ID = 7008, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7009", ID = 7009, ProductRating = 5 },
                        new { ProductID = 1007, UserID = "rt_7010", ID = 7010, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7011", ID = 7011, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7012", ID = 7012, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7013", ID = 7013, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7014", ID = 7014, ProductRating = 5 },
                        new { ProductID = 1007, UserID = "rt_7015", ID = 7015, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7016", ID = 7016, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7017", ID = 7017, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7018", ID = 7018, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7019", ID = 7019, ProductRating = 5 },
                        new { ProductID = 111, UserID = "admin_ID_123456789", ID = 16, ProductRating = 1 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Contact");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Website");

                    b.HasKey("ID");

                    b.ToTable("Supplier");

                    b.HasData(
                        new { ID = 11, Address = "lilach 99", Contact = "gil", Email = "gil@ziv.com", Name = "Guro", Phone = "054-9999999", Website = "www.anshubi.com" },
                        new { ID = 12, Address = "Aviv 99", Contact = "Zil", Email = "Ziv@Giv.com", Name = "Theuro", Phone = "054-9999199", Website = "www.tuna.com" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Cart", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.CartItem", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Product", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Category", "PrimaryCategory")
                        .WithMany()
                        .HasForeignKey("PrimaryCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ProductSupplier", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Purchase", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.PurchaseItem", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.Purchase", "Purchase")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Rating", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.ApplicationUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
