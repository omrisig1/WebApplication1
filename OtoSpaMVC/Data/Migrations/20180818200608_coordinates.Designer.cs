// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OtoSpaMVC.Data;

namespace OtoSpaMVC.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180818200608_coordinates")]
    partial class coordinates
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new { Id = "1", ConcurrencyStamp = "user", Name = "user", NormalizedName = "user" },
                        new { Id = "2", ConcurrencyStamp = "admin", Name = "admin", NormalizedName = "admin" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new { UserId = "admin_ID_123456789", RoleId = "2" },
                        new { UserId = "rt_7000", RoleId = "1" },
                        new { UserId = "rt_7001", RoleId = "1" },
                        new { UserId = "rt_7002", RoleId = "1" },
                        new { UserId = "rt_7003", RoleId = "1" },
                        new { UserId = "rt_7004", RoleId = "1" },
                        new { UserId = "rt_7005", RoleId = "1" },
                        new { UserId = "rt_7006", RoleId = "1" },
                        new { UserId = "rt_7007", RoleId = "1" },
                        new { UserId = "rt_7008", RoleId = "1" },
                        new { UserId = "rt_7009", RoleId = "1" },
                        new { UserId = "rt_7010", RoleId = "1" },
                        new { UserId = "rt_7011", RoleId = "1" },
                        new { UserId = "rt_7012", RoleId = "1" },
                        new { UserId = "rt_7013", RoleId = "1" },
                        new { UserId = "rt_7014", RoleId = "1" },
                        new { UserId = "rt_7015", RoleId = "1" },
                        new { UserId = "rt_7016", RoleId = "1" },
                        new { UserId = "rt_7017", RoleId = "1" },
                        new { UserId = "rt_7018", RoleId = "1" },
                        new { UserId = "rt_7019", RoleId = "1" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "admin_ID_123456789", AccessFailedCount = 0, ConcurrencyStamp = "79a28aea-1954-4bf1-bb62-56004383449b", Email = "admin@oto.spa", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "admin@oto.spa", NormalizedUserName = "admin@oto.spa", PasswordHash = "AQAAAAEAACcQAAAAEMSXRw6iyVqnYCSDBKbWbkJLTB2Uf2vcizw3l5r6hox35YwcLDsZEHJyOmRs+AgRPw==", PhoneNumberConfirmed = false, SecurityStamp = "admin@oto.spa", TwoFactorEnabled = false, UserName = "admin" },
                        new { Id = "rt_7000", AccessFailedCount = 0, ConcurrencyStamp = "69cbb7fb-1664-4a28-8770-394d227853a1", Email = "rt_7000@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7000@RaringsTest.com", NormalizedUserName = "rt_7000@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEII6v3Shm8HSM3RHLLe5vfa34RQdXI/e3bv0ETNE8/BVDZP0vca0Qretz1Mp3I2JJw==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7000@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7000" },
                        new { Id = "rt_7001", AccessFailedCount = 0, ConcurrencyStamp = "eb54a452-574b-4091-abb7-55de4b90cc1f", Email = "rt_7001@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7001@RaringsTest.com", NormalizedUserName = "rt_7001@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEHnnT0PpXXtQRISC/dMk+IcwtqRLIdizeWQ84275a5fdog8kVzJ/fcHFl6D0IjezUg==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7001@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7001" },
                        new { Id = "rt_7002", AccessFailedCount = 0, ConcurrencyStamp = "c997df23-dcf9-4a9e-9b6b-24dba440096a", Email = "rt_7002@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7002@RaringsTest.com", NormalizedUserName = "rt_7002@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEMkj17p5YEHpPwdI/AoU1gXBUQbeUXla2vt7kuQoF8mQZAIKEsyOyjxsqfEm2/E7bQ==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7002@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7002" },
                        new { Id = "rt_7003", AccessFailedCount = 0, ConcurrencyStamp = "1d2cdd3e-9602-49dc-bae9-ed4283c47fd9", Email = "rt_7003@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7003@RaringsTest.com", NormalizedUserName = "rt_7003@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEKA09BwX5LoPGRzUzdaswNBDJhwpEFzWooeiSqMmpH5HEyPUd6Yg8z9TdnTWuKFahA==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7003@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7003" },
                        new { Id = "rt_7004", AccessFailedCount = 0, ConcurrencyStamp = "7115751d-4898-4343-8f8a-47c261076ee4", Email = "rt_7004@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7004@RaringsTest.com", NormalizedUserName = "rt_7004@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEOCH8TjstEAXonzZVD4mZ8moM+78bV0gWllsqtGeiOozgAhvUGJJXNUVm5DKnlTp7g==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7004@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7004" },
                        new { Id = "rt_7005", AccessFailedCount = 0, ConcurrencyStamp = "0d2ca5a2-6d93-42d3-93ad-a53a1c4aa88c", Email = "rt_7005@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7005@RaringsTest.com", NormalizedUserName = "rt_7005@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEM/NuR6EcZ/F2pBL4xgFT2QXiKlfFSw7JImu+gEDo5qIZGHwSeMj6RZLRAeamcyjdg==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7005@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7005" },
                        new { Id = "rt_7006", AccessFailedCount = 0, ConcurrencyStamp = "a40ab790-ff76-4b79-9928-9b33fa8b5d37", Email = "rt_7006@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7006@RaringsTest.com", NormalizedUserName = "rt_7006@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEOz40CW+jlBEYTCN/znTFddIEAaM1lVlZ333XYJs8FNMryE7wH2K4j+Jcvd0HQOIOQ==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7006@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7006" },
                        new { Id = "rt_7007", AccessFailedCount = 0, ConcurrencyStamp = "5772318c-3358-4ea4-bec4-1de663407c6f", Email = "rt_7007@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7007@RaringsTest.com", NormalizedUserName = "rt_7007@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEHRGFBv0+sPPz1PXl4E2Ro/nUL2qNpH4APsjlejnzswKIms2h66VOv2p0zvJC/CMIQ==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7007@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7007" },
                        new { Id = "rt_7008", AccessFailedCount = 0, ConcurrencyStamp = "97b67b1a-eaa7-4e3e-a03b-b5648fbf8e66", Email = "rt_7008@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7008@RaringsTest.com", NormalizedUserName = "rt_7008@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEAe8rs/rWwzEeRvj8WsFLxdpngWQQrsHQX2+Eaj3OaprtnP0kCHvAhjcA2Nw+X5dzA==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7008@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7008" },
                        new { Id = "rt_7009", AccessFailedCount = 0, ConcurrencyStamp = "e533ad7d-bb8f-4745-b899-6597bd81debd", Email = "rt_7009@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7009@RaringsTest.com", NormalizedUserName = "rt_7009@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEMHrnoA5tdfqtFhEFDjZKwEX179V46eO6yTfiP5Hns4MPmMRwaOPrHrP3Zpfo/xK8A==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7009@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7009" },
                        new { Id = "rt_7010", AccessFailedCount = 0, ConcurrencyStamp = "b8e668d9-b7ef-459e-81f4-a874199d56eb", Email = "rt_7010@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7010@RaringsTest.com", NormalizedUserName = "rt_7010@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEEDLTdHpjtEBOqhnRhF1aIQbC0tY9KxhRI4ENOQFmuEWICgZ0Ljb5eqUeZhXWYRxQQ==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7010@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7010" },
                        new { Id = "rt_7011", AccessFailedCount = 0, ConcurrencyStamp = "a74a1e64-b403-48f1-9248-5c9505988f64", Email = "rt_7011@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7011@RaringsTest.com", NormalizedUserName = "rt_7011@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEHvhSeSHyCTkLp+X3czNjbLKNGb+CsXVOACm9l8nO7RlL55KQ5uqzEQnT2xGTpZCkw==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7011@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7011" },
                        new { Id = "rt_7012", AccessFailedCount = 0, ConcurrencyStamp = "6593b32d-68fb-4137-af69-5c386395ceb9", Email = "rt_7012@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7012@RaringsTest.com", NormalizedUserName = "rt_7012@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEOrA6la+fUtkvqPMkT2MChAkC+7UreiL7vcLlqiat1cepkgIqdRgwXOELVrjHpXL5A==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7012@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7012" },
                        new { Id = "rt_7013", AccessFailedCount = 0, ConcurrencyStamp = "1ba9d810-41d8-4fce-9796-efaca87a4d66", Email = "rt_7013@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7013@RaringsTest.com", NormalizedUserName = "rt_7013@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEHti2T8B+NQZeZeqjMncGlWazBZskmBcNCwR+6MnxfMHxtdcMMXlXEw8u6c2XlyqaA==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7013@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7013" },
                        new { Id = "rt_7014", AccessFailedCount = 0, ConcurrencyStamp = "fc2ba912-c875-47a0-af0d-0a840db8caba", Email = "rt_7014@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7014@RaringsTest.com", NormalizedUserName = "rt_7014@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEBv7Jd8lW5w2sUGJ9gFNKJRqu+1oRslmW6VGEUU8SP43YbJqwmJIxsjfdd+hk6PJlg==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7014@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7014" },
                        new { Id = "rt_7015", AccessFailedCount = 0, ConcurrencyStamp = "4fc7ca65-68d9-491a-bab5-cf0155d57d43", Email = "rt_7015@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7015@RaringsTest.com", NormalizedUserName = "rt_7015@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEEfPsA45ltAw1UZln/P6AzXiO52zF1up6RmQpktDBSbG5jTSz916AI1PJXOrtYIeEg==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7015@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7015" },
                        new { Id = "rt_7016", AccessFailedCount = 0, ConcurrencyStamp = "662e47d2-420d-4b19-ae35-154dcee12491", Email = "rt_7016@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7016@RaringsTest.com", NormalizedUserName = "rt_7016@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEFjDkfJLLc3/6xEZ/f+4BSSQsXA9YUYCI/L4N542mQZbUjTK96pzzPGqmaTLXVBArw==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7016@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7016" },
                        new { Id = "rt_7017", AccessFailedCount = 0, ConcurrencyStamp = "2cdd60eb-fe47-4280-8263-25471ef89ec2", Email = "rt_7017@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7017@RaringsTest.com", NormalizedUserName = "rt_7017@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEL0Jg+lonU5Nz09fjuqBqXqYOBhmMlUi2Pf2a3z8rrgIMX3Hu2NcS8swyi36lln8Vw==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7017@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7017" },
                        new { Id = "rt_7018", AccessFailedCount = 0, ConcurrencyStamp = "b64daf2c-e59f-42c8-b2fb-df13ffbfdc30", Email = "rt_7018@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7018@RaringsTest.com", NormalizedUserName = "rt_7018@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEFvxbdBb8yrs/hqu3YLT0YvIqx/V9XMR2LPbFqI/VyjDMxhtez99teH7CDKkbpMP8w==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7018@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7018" },
                        new { Id = "rt_7019", AccessFailedCount = 0, ConcurrencyStamp = "9fc91888-96e1-44b8-8c11-6007300df4a5", Email = "rt_7019@RaringsTest.com", EmailConfirmed = true, LockoutEnabled = true, NormalizedEmail = "rt_7019@RaringsTest.com", NormalizedUserName = "rt_7019@RaringsTest.com", PasswordHash = "AQAAAAEAACcQAAAAEKb2vivIDR4etmJp3G5Szujis/3Tcl/5oncjp+4Fs+5koXiUyboubnnU0wE5iaquBg==", PhoneNumberConfirmed = false, SecurityStamp = "rt_7019@RaringsTest.com", TwoFactorEnabled = false, UserName = "RaringsTest_rt_7019" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Editable");

                    b.Property<int>("Total");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Cart");

                    b.HasData(
                        new { ID = 13, Editable = true, Total = 2, UserID = "admin_ID_123456789" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.CartItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("CartID");

                    b.Property<int>("ProductID");

                    b.HasKey("ID");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartItem");

                    b.HasData(
                        new { ID = 14, Amount = 1, CartID = 13, ProductID = 111 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Category");

                    b.HasData(
                        new { ID = 500, Name = "PrimeCategory_0" },
                        new { ID = 501, Name = "PrimeCategory_1" },
                        new { ID = 502, Name = "PrimeCategory_2" },
                        new { ID = 503, Name = "PrimeCategory_3" },
                        new { ID = 504, Name = "PrimeCategory_4" },
                        new { ID = 7, Name = "Car Accessories" },
                        new { ID = 8, Name = "Cleaning Products" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ContactUs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ContactDate");

                    b.Property<string>("ContactHeader")
                        .HasMaxLength(160);

                    b.Property<string>("ContactName")
                        .HasMaxLength(15);

                    b.Property<string>("Content")
                        .HasMaxLength(160);

                    b.Property<string>("Email")
                        .HasMaxLength(20);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<bool>("Responded");

                    b.HasKey("ID");

                    b.ToTable("ContactUs");

                    b.HasData(
                        new { ID = 123, ContactDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ContactHeader = "Hi", Content = "How Is Business Going?", Responded = false }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.GoogleMap", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("langi");

                    b.Property<double>("longi");

                    b.HasKey("ID");

                    b.ToTable("GoogleMap");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PrimaryCategoryID");

                    b.Property<string>("ProductName");

                    b.Property<double>("ProductPrice");

                    b.Property<string>("URIImage");

                    b.HasKey("ID");

                    b.HasIndex("PrimaryCategoryID");

                    b.ToTable("Product");

                    b.HasData(
                        new { ID = 1000, PrimaryCategoryID = 500, ProductName = "Prod_0", ProductPrice = 367.0 },
                        new { ID = 1001, PrimaryCategoryID = 501, ProductName = "Prod_1", ProductPrice = 487.0 },
                        new { ID = 1002, PrimaryCategoryID = 502, ProductName = "Prod_2", ProductPrice = 404.0 },
                        new { ID = 1003, PrimaryCategoryID = 503, ProductName = "Prod_3", ProductPrice = 341.0 },
                        new { ID = 1004, PrimaryCategoryID = 504, ProductName = "Prod_4", ProductPrice = 50.0 },
                        new { ID = 1005, PrimaryCategoryID = 500, ProductName = "Prod_5", ProductPrice = 57.0 },
                        new { ID = 1006, PrimaryCategoryID = 501, ProductName = "Prod_6", ProductPrice = 366.0 },
                        new { ID = 1007, PrimaryCategoryID = 502, ProductName = "Prod_7", ProductPrice = 438.0 },
                        new { ID = 1008, PrimaryCategoryID = 503, ProductName = "Prod_8", ProductPrice = 69.0 },
                        new { ID = 1009, PrimaryCategoryID = 504, ProductName = "Prod_9", ProductPrice = 111.0 },
                        new { ID = 1010, PrimaryCategoryID = 500, ProductName = "Prod_10", ProductPrice = 415.0 },
                        new { ID = 1011, PrimaryCategoryID = 501, ProductName = "Prod_11", ProductPrice = 254.0 },
                        new { ID = 1012, PrimaryCategoryID = 502, ProductName = "Prod_12", ProductPrice = 201.0 },
                        new { ID = 1013, PrimaryCategoryID = 503, ProductName = "Prod_13", ProductPrice = 214.0 },
                        new { ID = 1014, PrimaryCategoryID = 504, ProductName = "Prod_14", ProductPrice = 336.0 },
                        new { ID = 1015, PrimaryCategoryID = 500, ProductName = "Prod_15", ProductPrice = 277.0 },
                        new { ID = 1016, PrimaryCategoryID = 501, ProductName = "Prod_16", ProductPrice = 487.0 },
                        new { ID = 1017, PrimaryCategoryID = 502, ProductName = "Prod_17", ProductPrice = 182.0 },
                        new { ID = 1018, PrimaryCategoryID = 503, ProductName = "Prod_18", ProductPrice = 63.0 },
                        new { ID = 1019, PrimaryCategoryID = 504, ProductName = "Prod_19", ProductPrice = 54.0 },
                        new { ID = 1020, PrimaryCategoryID = 500, ProductName = "Prod_20", ProductPrice = 326.0 },
                        new { ID = 1021, PrimaryCategoryID = 501, ProductName = "Prod_21", ProductPrice = 487.0 },
                        new { ID = 1022, PrimaryCategoryID = 502, ProductName = "Prod_22", ProductPrice = 15.0 },
                        new { ID = 1023, PrimaryCategoryID = 503, ProductName = "Prod_23", ProductPrice = 457.0 },
                        new { ID = 1024, PrimaryCategoryID = 504, ProductName = "Prod_24", ProductPrice = 352.0 },
                        new { ID = 1025, PrimaryCategoryID = 500, ProductName = "Prod_25", ProductPrice = 270.0 },
                        new { ID = 1026, PrimaryCategoryID = 501, ProductName = "Prod_26", ProductPrice = 422.0 },
                        new { ID = 1027, PrimaryCategoryID = 502, ProductName = "Prod_27", ProductPrice = 183.0 },
                        new { ID = 1028, PrimaryCategoryID = 503, ProductName = "Prod_28", ProductPrice = 278.0 },
                        new { ID = 1029, PrimaryCategoryID = 504, ProductName = "Prod_29", ProductPrice = 161.0 },
                        new { ID = 1030, PrimaryCategoryID = 500, ProductName = "Prod_30", ProductPrice = 109.0 },
                        new { ID = 1031, PrimaryCategoryID = 501, ProductName = "Prod_31", ProductPrice = 404.0 },
                        new { ID = 1032, PrimaryCategoryID = 502, ProductName = "Prod_32", ProductPrice = 229.0 },
                        new { ID = 1033, PrimaryCategoryID = 503, ProductName = "Prod_33", ProductPrice = 47.0 },
                        new { ID = 1034, PrimaryCategoryID = 504, ProductName = "Prod_34", ProductPrice = 273.0 },
                        new { ID = 1035, PrimaryCategoryID = 500, ProductName = "Prod_35", ProductPrice = 261.0 },
                        new { ID = 1036, PrimaryCategoryID = 501, ProductName = "Prod_36", ProductPrice = 460.0 },
                        new { ID = 1037, PrimaryCategoryID = 502, ProductName = "Prod_37", ProductPrice = 337.0 },
                        new { ID = 1038, PrimaryCategoryID = 503, ProductName = "Prod_38", ProductPrice = 271.0 },
                        new { ID = 1039, PrimaryCategoryID = 504, ProductName = "Prod_39", ProductPrice = 311.0 },
                        new { ID = 1040, PrimaryCategoryID = 500, ProductName = "Prod_40", ProductPrice = 490.0 },
                        new { ID = 1041, PrimaryCategoryID = 501, ProductName = "Prod_41", ProductPrice = 221.0 },
                        new { ID = 1042, PrimaryCategoryID = 502, ProductName = "Prod_42", ProductPrice = 89.0 },
                        new { ID = 1043, PrimaryCategoryID = 503, ProductName = "Prod_43", ProductPrice = 486.0 },
                        new { ID = 1044, PrimaryCategoryID = 504, ProductName = "Prod_44", ProductPrice = 353.0 },
                        new { ID = 1045, PrimaryCategoryID = 500, ProductName = "Prod_45", ProductPrice = 462.0 },
                        new { ID = 1046, PrimaryCategoryID = 501, ProductName = "Prod_46", ProductPrice = 387.0 },
                        new { ID = 1047, PrimaryCategoryID = 502, ProductName = "Prod_47", ProductPrice = 407.0 },
                        new { ID = 1048, PrimaryCategoryID = 503, ProductName = "Prod_48", ProductPrice = 45.0 },
                        new { ID = 1049, PrimaryCategoryID = 504, ProductName = "Prod_49", ProductPrice = 411.0 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ProductSupplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductID");

                    b.Property<int>("SupplierID");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SupplierID");

                    b.ToTable("ProductSupplier");

                    b.HasData(
                        new { ID = 18, ProductID = 111, SupplierID = 11 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Purchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreditDetails");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<double>("Total");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Purchase");

                    b.HasData(
                        new { ID = 9000, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7000" },
                        new { ID = 9001, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7001" },
                        new { ID = 9002, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7002" },
                        new { ID = 9003, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7003" },
                        new { ID = 9004, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7004" },
                        new { ID = 9005, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7005" },
                        new { ID = 9006, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7006" },
                        new { ID = 9007, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7007" },
                        new { ID = 9008, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7008" },
                        new { ID = 9009, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7009" },
                        new { ID = 9010, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7010" },
                        new { ID = 9011, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7011" },
                        new { ID = 9012, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7012" },
                        new { ID = 9013, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7013" },
                        new { ID = 9014, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7014" },
                        new { ID = 9015, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7015" },
                        new { ID = 9016, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7016" },
                        new { ID = 9017, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7017" },
                        new { ID = 9018, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7018" },
                        new { ID = 9019, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7019" },
                        new { ID = 15, CreditDetails = "YOOOLLLLOOOO", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "admin_ID_123456789" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.PurchaseItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("ProductID");

                    b.Property<int>("PurchaseID");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("PurchaseID");

                    b.ToTable("PurchaseItem");

                    b.HasData(
                        new { ID = 90000, Amount = 3, ProductID = 1033, PurchaseID = 9000 },
                        new { ID = 90001, Amount = 2, ProductID = 1005, PurchaseID = 9000 },
                        new { ID = 90002, Amount = 7, ProductID = 1026, PurchaseID = 9000 },
                        new { ID = 90010, Amount = 9, ProductID = 1048, PurchaseID = 9001 },
                        new { ID = 90011, Amount = 5, ProductID = 1048, PurchaseID = 9001 },
                        new { ID = 90012, Amount = 4, ProductID = 1012, PurchaseID = 9001 },
                        new { ID = 90020, Amount = 8, ProductID = 1016, PurchaseID = 9002 },
                        new { ID = 90021, Amount = 1, ProductID = 1000, PurchaseID = 9002 },
                        new { ID = 90022, Amount = 3, ProductID = 1002, PurchaseID = 9002 },
                        new { ID = 90030, Amount = 2, ProductID = 1044, PurchaseID = 9003 },
                        new { ID = 90031, Amount = 3, ProductID = 1031, PurchaseID = 9003 },
                        new { ID = 90032, Amount = 5, ProductID = 1040, PurchaseID = 9003 },
                        new { ID = 90040, Amount = 2, ProductID = 1005, PurchaseID = 9004 },
                        new { ID = 90041, Amount = 1, ProductID = 1040, PurchaseID = 9004 },
                        new { ID = 90042, Amount = 7, ProductID = 1010, PurchaseID = 9004 },
                        new { ID = 90050, Amount = 1, ProductID = 1038, PurchaseID = 9005 },
                        new { ID = 90051, Amount = 7, ProductID = 1014, PurchaseID = 9005 },
                        new { ID = 90052, Amount = 9, ProductID = 1031, PurchaseID = 9005 },
                        new { ID = 90060, Amount = 3, ProductID = 1034, PurchaseID = 9006 },
                        new { ID = 90061, Amount = 8, ProductID = 1027, PurchaseID = 9006 },
                        new { ID = 90062, Amount = 1, ProductID = 1027, PurchaseID = 9006 },
                        new { ID = 90070, Amount = 9, ProductID = 1034, PurchaseID = 9007 },
                        new { ID = 90071, Amount = 6, ProductID = 1018, PurchaseID = 9007 },
                        new { ID = 90072, Amount = 4, ProductID = 1005, PurchaseID = 9007 },
                        new { ID = 90080, Amount = 7, ProductID = 1048, PurchaseID = 9008 },
                        new { ID = 90081, Amount = 5, ProductID = 1043, PurchaseID = 9008 },
                        new { ID = 90082, Amount = 9, ProductID = 1046, PurchaseID = 9008 },
                        new { ID = 90090, Amount = 4, ProductID = 1009, PurchaseID = 9009 },
                        new { ID = 90091, Amount = 6, ProductID = 1021, PurchaseID = 9009 },
                        new { ID = 90092, Amount = 3, ProductID = 1001, PurchaseID = 9009 },
                        new { ID = 90100, Amount = 9, ProductID = 1047, PurchaseID = 9010 },
                        new { ID = 90101, Amount = 2, ProductID = 1033, PurchaseID = 9010 },
                        new { ID = 90102, Amount = 3, ProductID = 1039, PurchaseID = 9010 },
                        new { ID = 90110, Amount = 6, ProductID = 1004, PurchaseID = 9011 },
                        new { ID = 90111, Amount = 1, ProductID = 1009, PurchaseID = 9011 },
                        new { ID = 90112, Amount = 7, ProductID = 1016, PurchaseID = 9011 },
                        new { ID = 90120, Amount = 1, ProductID = 1038, PurchaseID = 9012 },
                        new { ID = 90121, Amount = 6, ProductID = 1030, PurchaseID = 9012 },
                        new { ID = 90122, Amount = 8, ProductID = 1030, PurchaseID = 9012 },
                        new { ID = 90130, Amount = 5, ProductID = 1006, PurchaseID = 9013 },
                        new { ID = 90131, Amount = 5, ProductID = 1005, PurchaseID = 9013 },
                        new { ID = 90132, Amount = 5, ProductID = 1003, PurchaseID = 9013 },
                        new { ID = 90140, Amount = 3, ProductID = 1045, PurchaseID = 9014 },
                        new { ID = 90141, Amount = 4, ProductID = 1005, PurchaseID = 9014 },
                        new { ID = 90142, Amount = 3, ProductID = 1026, PurchaseID = 9014 },
                        new { ID = 90150, Amount = 1, ProductID = 1026, PurchaseID = 9015 },
                        new { ID = 90151, Amount = 2, ProductID = 1013, PurchaseID = 9015 },
                        new { ID = 90152, Amount = 6, ProductID = 1041, PurchaseID = 9015 },
                        new { ID = 90160, Amount = 5, ProductID = 1017, PurchaseID = 9016 },
                        new { ID = 90161, Amount = 2, ProductID = 1009, PurchaseID = 9016 },
                        new { ID = 90162, Amount = 5, ProductID = 1025, PurchaseID = 9016 },
                        new { ID = 90170, Amount = 9, ProductID = 1008, PurchaseID = 9017 },
                        new { ID = 90171, Amount = 2, ProductID = 1017, PurchaseID = 9017 },
                        new { ID = 90172, Amount = 8, ProductID = 1034, PurchaseID = 9017 },
                        new { ID = 90180, Amount = 6, ProductID = 1015, PurchaseID = 9018 },
                        new { ID = 90181, Amount = 6, ProductID = 1037, PurchaseID = 9018 },
                        new { ID = 90182, Amount = 5, ProductID = 1024, PurchaseID = 9018 },
                        new { ID = 90190, Amount = 5, ProductID = 1010, PurchaseID = 9019 },
                        new { ID = 90191, Amount = 2, ProductID = 1042, PurchaseID = 9019 },
                        new { ID = 90192, Amount = 5, ProductID = 1014, PurchaseID = 9019 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Rating", b =>
                {
                    b.Property<int>("ProductID");

                    b.Property<string>("UserID");

                    b.Property<int>("ID");

                    b.Property<int>("ProductRating");

                    b.HasKey("ProductID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Rating");

                    b.HasData(
                        new { ProductID = 1007, UserID = "rt_7000", ID = 7000, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7001", ID = 7001, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7002", ID = 7002, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7003", ID = 7003, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7004", ID = 7004, ProductRating = 5 },
                        new { ProductID = 1007, UserID = "rt_7005", ID = 7005, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7006", ID = 7006, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7007", ID = 7007, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7008", ID = 7008, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7009", ID = 7009, ProductRating = 5 },
                        new { ProductID = 1007, UserID = "rt_7010", ID = 7010, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7011", ID = 7011, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7012", ID = 7012, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7013", ID = 7013, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7014", ID = 7014, ProductRating = 5 },
                        new { ProductID = 1007, UserID = "rt_7015", ID = 7015, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7016", ID = 7016, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7017", ID = 7017, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7018", ID = 7018, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7019", ID = 7019, ProductRating = 5 },
                        new { ProductID = 111, UserID = "admin_ID_123456789", ID = 16, ProductRating = 1 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Contact");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Website");

                    b.HasKey("ID");

                    b.ToTable("Supplier");

                    b.HasData(
                        new { ID = 11, Address = "lilach 99", Contact = "gil", Email = "gil@ziv.com", Name = "Guro", Phone = "054-9999999", Website = "www.anshubi.com" },
                        new { ID = 12, Address = "Aviv 99", Contact = "Zil", Email = "Ziv@Giv.com", Name = "Theuro", Phone = "054-9999199", Website = "www.tuna.com" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Cart", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.CartItem", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Product", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Category", "PrimaryCategory")
                        .WithMany()
                        .HasForeignKey("PrimaryCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ProductSupplier", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Purchase", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.PurchaseItem", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.Purchase", "Purchase")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Rating", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.ApplicationUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
