// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OtoSpaMVC.Data;

namespace OtoSpaMVC.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20180816143114_cartTotalToPurchTotal")]
    partial class cartTotalToPurchTotal
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new { Id = "admin_ID_123456789", AccessFailedCount = 0, ConcurrencyStamp = "1fdc46bc-dd02-4fa1-8843-b2f72715a95f", Email = "admin@oto.spa", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAELQeLX7wJ+XxGyvvZ4mca8+Ag6BYjbdaTtXAIU80wKckkEliWYrN0eHuYJGIpY9HuA==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "admin" },
                        new { Id = "rt_7000", AccessFailedCount = 0, ConcurrencyStamp = "43957831-b408-4c52-b3ae-b808e6959285", Email = "rt_7000@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAELIPyXvRTbxeYY5lah5nrIrXwHtYoYMgfSh2DsqBmZ1NXQPjA5qFBoL9XH0sj58J2A==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7000" },
                        new { Id = "rt_7001", AccessFailedCount = 0, ConcurrencyStamp = "688e1efc-9e6d-4c8a-9e3e-68be631de2c9", Email = "rt_7001@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEKiF3k+gxJ27p5b3Yp91r8K1IQTcECNg/0HVMZZ3mcS1pwEsz7GTw/c6ReMzGmuVYg==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7001" },
                        new { Id = "rt_7002", AccessFailedCount = 0, ConcurrencyStamp = "4bb199ed-cb0a-43c3-9c65-5c8dded9a627", Email = "rt_7002@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEJKX842Vy7vUewmCII3wW3TDFIlsjJE97j6So9W+1MRrV9LB3fgJ0xkdIM09gf09pQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7002" },
                        new { Id = "rt_7003", AccessFailedCount = 0, ConcurrencyStamp = "96819a5c-6fa5-4e0d-847f-4e704d55da20", Email = "rt_7003@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAENJ3ky/KlFKpxNKJPNnH8Q9cRdIlhmTlA3VYaBGFR208b8ot37yOrbanV97mv8TrvA==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7003" },
                        new { Id = "rt_7004", AccessFailedCount = 0, ConcurrencyStamp = "490b5916-a881-4487-9fb7-707824d4cf76", Email = "rt_7004@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEHy5JbVogifpaNGhDY6tKp1Nn8l9jpjQ2SHMIbme+/2Lghc9UUnMGBn4tmR+IHZTVQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7004" },
                        new { Id = "rt_7005", AccessFailedCount = 0, ConcurrencyStamp = "38d61f7b-2300-4527-9e76-1604cdd56e41", Email = "rt_7005@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEBLAvh7kFBdEQanNIHYZs6XXaJVSHiWUJ1Ek2ubNkezvrm/K+/SOORajWpkoahuQug==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7005" },
                        new { Id = "rt_7006", AccessFailedCount = 0, ConcurrencyStamp = "32aa75f4-1e3b-4993-911b-ced6c1296188", Email = "rt_7006@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEF5KdV0mZ/FD0CRGO+mskXwznWHf+LQUws/j814/oao3z5q//xAicJYhVE7d9B8Kig==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7006" },
                        new { Id = "rt_7007", AccessFailedCount = 0, ConcurrencyStamp = "4614f226-10b5-4a47-9ae6-a8e43fe358b0", Email = "rt_7007@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEP3lQ1vOE69A30W0MvH6uum/y9SxaYn+TpuNZYvXVUy28pCrbqzTMuPx5qmtHwWU9w==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7007" },
                        new { Id = "rt_7008", AccessFailedCount = 0, ConcurrencyStamp = "f8642f3f-8aab-4383-8fef-16425b39079a", Email = "rt_7008@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEM/djiey8L833KYwnLhpdXIWSNioypsAItyLDQP9pLpgKGiEU4MLQXiXaMx2iQzyYQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7008" },
                        new { Id = "rt_7009", AccessFailedCount = 0, ConcurrencyStamp = "92c68b1d-97b1-4e47-872a-f7cf1435b545", Email = "rt_7009@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEEjSVHJnC5FIZoE0RFbaov9Hbnu+2Tz1iIKCp6AxDtN/q6wNaT02EbbS6GyJuYF0tA==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7009" },
                        new { Id = "rt_7010", AccessFailedCount = 0, ConcurrencyStamp = "a9a7dca3-8b0c-4bc7-9026-897fd10d2cd4", Email = "rt_7010@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEIkR08Yur975MerqxxjMRo5c9SQpq+kIhMZQ6RPOGsPZq8PhXyjT6B46WUtjfrSNRg==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7010" },
                        new { Id = "rt_7011", AccessFailedCount = 0, ConcurrencyStamp = "3d1c15c8-c0b6-4040-ba63-f3988353798c", Email = "rt_7011@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEC+HpJFZ5Fcz9RvToi6Nm03hpuFaBPBD+JkEJo8zJghLBkR+wL7lkoQD2cicnnHXeQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7011" },
                        new { Id = "rt_7012", AccessFailedCount = 0, ConcurrencyStamp = "d3767e51-f0bf-4412-8b3b-3337a0195d37", Email = "rt_7012@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEFWHqWNFeKeCNpaIUOLZOZUpqiiQ8wASdxxE/SSgEeA8cL/+i8R9dI/eaGrELHPlYw==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7012" },
                        new { Id = "rt_7013", AccessFailedCount = 0, ConcurrencyStamp = "bbc51adb-93ad-477d-89f4-76db24fc9789", Email = "rt_7013@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEIAVjAvb9ZKJpuLEQ70i0Oj76R+010bfcfxnfX5dGgimbMo2EqJ6EbhCNxXHB4Zh2A==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7013" },
                        new { Id = "rt_7014", AccessFailedCount = 0, ConcurrencyStamp = "1373f5f4-ba69-4016-97e5-414f7e4916e4", Email = "rt_7014@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAELUsA++RqWBMh41ooCCWnI3tG3ZDI0bUXQlbZlaIvkLSSLem1w+FtnsIujDj81LDXg==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7014" },
                        new { Id = "rt_7015", AccessFailedCount = 0, ConcurrencyStamp = "fc24b23d-33e3-42b0-8ded-6bb5d5cbafc6", Email = "rt_7015@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEB5dyUtIhn9WZpjpnWjDGhAyB3+6fW8i/NH/c1gEtgOUvT1B7ub8nVGc7/nF/7pFzQ==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7015" },
                        new { Id = "rt_7016", AccessFailedCount = 0, ConcurrencyStamp = "bcc00b26-e786-4144-be19-b4b28cc7c147", Email = "rt_7016@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAED/ig55XwVoJuV7VKT/8aVetLEhj6OW+YhQlfpUgIYCP4D37KvCYx2/xQPYq4oU/Fw==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7016" },
                        new { Id = "rt_7017", AccessFailedCount = 0, ConcurrencyStamp = "7dea74fd-4714-42a6-a4ec-ad5573aaedba", Email = "rt_7017@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEFzXDk4jBvSkBB0mSmcmRjnsmusGjXl/rvvNo/gtECoMScRCA9qBRaY5zE4ImiUhow==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7017" },
                        new { Id = "rt_7018", AccessFailedCount = 0, ConcurrencyStamp = "5c416f39-af5c-4662-8b6a-2983a771badb", Email = "rt_7018@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAENOUMkdsE4tip5G5/0Pod0mDhJEhQpjhK2DnQeQUM6IRpE7L4viyQeoWIlmbXmY0uw==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7018" },
                        new { Id = "rt_7019", AccessFailedCount = 0, ConcurrencyStamp = "cf88db87-100d-44ad-b858-e733fac8405d", Email = "rt_7019@RaringsTest.com", EmailConfirmed = false, LockoutEnabled = false, PasswordHash = "AQAAAAEAACcQAAAAEI9RoKMMbrQGXn2Ljk2D0Gtk4sjdiheyZd8EzqomnLYdv3gtE1sR2Z29IN1ug8wYcw==", PhoneNumberConfirmed = false, TwoFactorEnabled = false, UserName = "RaringsTest_rt_7019" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Editable");

                    b.Property<int>("Total");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Cart");

                    b.HasData(
                        new { ID = 13, Editable = true, Total = 2, UserID = "admin_ID_123456789" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.CartItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("CartID");

                    b.Property<int>("ProductID");

                    b.HasKey("ID");

                    b.HasIndex("CartID");

                    b.HasIndex("ProductID");

                    b.ToTable("CartItem");

                    b.HasData(
                        new { ID = 14, Amount = 1, CartID = 13, ProductID = 111 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Category");

                    b.HasData(
                        new { ID = 500, Name = "PrimeCategory_0" },
                        new { ID = 501, Name = "PrimeCategory_1" },
                        new { ID = 502, Name = "PrimeCategory_2" },
                        new { ID = 503, Name = "PrimeCategory_3" },
                        new { ID = 504, Name = "PrimeCategory_4" },
                        new { ID = 7, Name = "Car Accessories" },
                        new { ID = 8, Name = "Cleaning Products" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ContactUs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactHeader")
                        .HasMaxLength(160);

                    b.Property<string>("Content")
                        .HasMaxLength(160);

                    b.Property<string>("Email")
                        .HasMaxLength(20);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<bool>("Responded");

                    b.HasKey("ID");

                    b.ToTable("ContactUs");

                    b.HasData(
                        new { ID = 123, ContactHeader = "Hi", Content = "How Is Business Going?", Responded = false }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PrimaryCategoryID");

                    b.Property<string>("ProductName");

                    b.Property<double>("ProductPrice");

                    b.Property<string>("URIImage");

                    b.HasKey("ID");

                    b.HasIndex("PrimaryCategoryID");

                    b.ToTable("Product");

                    b.HasData(
                        new { ID = 1000, PrimaryCategoryID = 500, ProductName = "Prod_0", ProductPrice = 340.0 },
                        new { ID = 1001, PrimaryCategoryID = 501, ProductName = "Prod_1", ProductPrice = 212.0 },
                        new { ID = 1002, PrimaryCategoryID = 502, ProductName = "Prod_2", ProductPrice = 110.0 },
                        new { ID = 1003, PrimaryCategoryID = 503, ProductName = "Prod_3", ProductPrice = 261.0 },
                        new { ID = 1004, PrimaryCategoryID = 504, ProductName = "Prod_4", ProductPrice = 349.0 },
                        new { ID = 1005, PrimaryCategoryID = 500, ProductName = "Prod_5", ProductPrice = 391.0 },
                        new { ID = 1006, PrimaryCategoryID = 501, ProductName = "Prod_6", ProductPrice = 201.0 },
                        new { ID = 1007, PrimaryCategoryID = 502, ProductName = "Prod_7", ProductPrice = 278.0 },
                        new { ID = 1008, PrimaryCategoryID = 503, ProductName = "Prod_8", ProductPrice = 373.0 },
                        new { ID = 1009, PrimaryCategoryID = 504, ProductName = "Prod_9", ProductPrice = 306.0 },
                        new { ID = 1010, PrimaryCategoryID = 500, ProductName = "Prod_10", ProductPrice = 368.0 },
                        new { ID = 1011, PrimaryCategoryID = 501, ProductName = "Prod_11", ProductPrice = 429.0 },
                        new { ID = 1012, PrimaryCategoryID = 502, ProductName = "Prod_12", ProductPrice = 467.0 },
                        new { ID = 1013, PrimaryCategoryID = 503, ProductName = "Prod_13", ProductPrice = 40.0 },
                        new { ID = 1014, PrimaryCategoryID = 504, ProductName = "Prod_14", ProductPrice = 111.0 },
                        new { ID = 1015, PrimaryCategoryID = 500, ProductName = "Prod_15", ProductPrice = 438.0 },
                        new { ID = 1016, PrimaryCategoryID = 501, ProductName = "Prod_16", ProductPrice = 391.0 },
                        new { ID = 1017, PrimaryCategoryID = 502, ProductName = "Prod_17", ProductPrice = 212.0 },
                        new { ID = 1018, PrimaryCategoryID = 503, ProductName = "Prod_18", ProductPrice = 362.0 },
                        new { ID = 1019, PrimaryCategoryID = 504, ProductName = "Prod_19", ProductPrice = 200.0 },
                        new { ID = 1020, PrimaryCategoryID = 500, ProductName = "Prod_20", ProductPrice = 383.0 },
                        new { ID = 1021, PrimaryCategoryID = 501, ProductName = "Prod_21", ProductPrice = 309.0 },
                        new { ID = 1022, PrimaryCategoryID = 502, ProductName = "Prod_22", ProductPrice = 252.0 },
                        new { ID = 1023, PrimaryCategoryID = 503, ProductName = "Prod_23", ProductPrice = 460.0 },
                        new { ID = 1024, PrimaryCategoryID = 504, ProductName = "Prod_24", ProductPrice = 236.0 },
                        new { ID = 1025, PrimaryCategoryID = 500, ProductName = "Prod_25", ProductPrice = 116.0 },
                        new { ID = 1026, PrimaryCategoryID = 501, ProductName = "Prod_26", ProductPrice = 135.0 },
                        new { ID = 1027, PrimaryCategoryID = 502, ProductName = "Prod_27", ProductPrice = 230.0 },
                        new { ID = 1028, PrimaryCategoryID = 503, ProductName = "Prod_28", ProductPrice = 493.0 },
                        new { ID = 1029, PrimaryCategoryID = 504, ProductName = "Prod_29", ProductPrice = 39.0 },
                        new { ID = 1030, PrimaryCategoryID = 500, ProductName = "Prod_30", ProductPrice = 15.0 },
                        new { ID = 1031, PrimaryCategoryID = 501, ProductName = "Prod_31", ProductPrice = 363.0 },
                        new { ID = 1032, PrimaryCategoryID = 502, ProductName = "Prod_32", ProductPrice = 57.0 },
                        new { ID = 1033, PrimaryCategoryID = 503, ProductName = "Prod_33", ProductPrice = 377.0 },
                        new { ID = 1034, PrimaryCategoryID = 504, ProductName = "Prod_34", ProductPrice = 243.0 },
                        new { ID = 1035, PrimaryCategoryID = 500, ProductName = "Prod_35", ProductPrice = 188.0 },
                        new { ID = 1036, PrimaryCategoryID = 501, ProductName = "Prod_36", ProductPrice = 77.0 },
                        new { ID = 1037, PrimaryCategoryID = 502, ProductName = "Prod_37", ProductPrice = 163.0 },
                        new { ID = 1038, PrimaryCategoryID = 503, ProductName = "Prod_38", ProductPrice = 16.0 },
                        new { ID = 1039, PrimaryCategoryID = 504, ProductName = "Prod_39", ProductPrice = 362.0 },
                        new { ID = 1040, PrimaryCategoryID = 500, ProductName = "Prod_40", ProductPrice = 315.0 },
                        new { ID = 1041, PrimaryCategoryID = 501, ProductName = "Prod_41", ProductPrice = 251.0 },
                        new { ID = 1042, PrimaryCategoryID = 502, ProductName = "Prod_42", ProductPrice = 177.0 },
                        new { ID = 1043, PrimaryCategoryID = 503, ProductName = "Prod_43", ProductPrice = 475.0 },
                        new { ID = 1044, PrimaryCategoryID = 504, ProductName = "Prod_44", ProductPrice = 131.0 },
                        new { ID = 1045, PrimaryCategoryID = 500, ProductName = "Prod_45", ProductPrice = 347.0 },
                        new { ID = 1046, PrimaryCategoryID = 501, ProductName = "Prod_46", ProductPrice = 247.0 },
                        new { ID = 1047, PrimaryCategoryID = 502, ProductName = "Prod_47", ProductPrice = 464.0 },
                        new { ID = 1048, PrimaryCategoryID = 503, ProductName = "Prod_48", ProductPrice = 365.0 },
                        new { ID = 1049, PrimaryCategoryID = 504, ProductName = "Prod_49", ProductPrice = 236.0 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ProductSupplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductID");

                    b.Property<int>("SupplierID");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("SupplierID");

                    b.ToTable("ProductSupplier");

                    b.HasData(
                        new { ID = 18, ProductID = 111, SupplierID = 11 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Purchase", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreditDetails");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<double>("Total");

                    b.Property<string>("UserID");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Purchase");

                    b.HasData(
                        new { ID = 9000, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7000" },
                        new { ID = 9001, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7001" },
                        new { ID = 9002, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7002" },
                        new { ID = 9003, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7003" },
                        new { ID = 9004, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7004" },
                        new { ID = 9005, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7005" },
                        new { ID = 9006, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7006" },
                        new { ID = 9007, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7007" },
                        new { ID = 9008, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7008" },
                        new { ID = 9009, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7009" },
                        new { ID = 9010, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7010" },
                        new { ID = 9011, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7011" },
                        new { ID = 9012, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7012" },
                        new { ID = 9013, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7013" },
                        new { ID = 9014, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7014" },
                        new { ID = 9015, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7015" },
                        new { ID = 9016, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7016" },
                        new { ID = 9017, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7017" },
                        new { ID = 9018, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7018" },
                        new { ID = 9019, CreditDetails = "abc", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "rt_7019" },
                        new { ID = 15, CreditDetails = "YOOOLLLLOOOO", PurchaseDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Total = 0.0, UserID = "admin_ID_123456789" }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.PurchaseItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("ProductID");

                    b.Property<int>("PurchaseID");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("PurchaseID");

                    b.ToTable("PurchaseItem");

                    b.HasData(
                        new { ID = 90000, Amount = 3, ProductID = 1045, PurchaseID = 9000 },
                        new { ID = 90001, Amount = 1, ProductID = 1044, PurchaseID = 9000 },
                        new { ID = 90002, Amount = 1, ProductID = 1042, PurchaseID = 9000 },
                        new { ID = 90010, Amount = 3, ProductID = 1045, PurchaseID = 9001 },
                        new { ID = 90011, Amount = 5, ProductID = 1002, PurchaseID = 9001 },
                        new { ID = 90012, Amount = 9, ProductID = 1026, PurchaseID = 9001 },
                        new { ID = 90020, Amount = 7, ProductID = 1028, PurchaseID = 9002 },
                        new { ID = 90021, Amount = 1, ProductID = 1029, PurchaseID = 9002 },
                        new { ID = 90022, Amount = 2, ProductID = 1037, PurchaseID = 9002 },
                        new { ID = 90030, Amount = 8, ProductID = 1029, PurchaseID = 9003 },
                        new { ID = 90031, Amount = 5, ProductID = 1036, PurchaseID = 9003 },
                        new { ID = 90032, Amount = 9, ProductID = 1020, PurchaseID = 9003 },
                        new { ID = 90040, Amount = 3, ProductID = 1038, PurchaseID = 9004 },
                        new { ID = 90041, Amount = 5, ProductID = 1013, PurchaseID = 9004 },
                        new { ID = 90042, Amount = 7, ProductID = 1033, PurchaseID = 9004 },
                        new { ID = 90050, Amount = 3, ProductID = 1036, PurchaseID = 9005 },
                        new { ID = 90051, Amount = 5, ProductID = 1036, PurchaseID = 9005 },
                        new { ID = 90052, Amount = 7, ProductID = 1007, PurchaseID = 9005 },
                        new { ID = 90060, Amount = 9, ProductID = 1041, PurchaseID = 9006 },
                        new { ID = 90061, Amount = 4, ProductID = 1045, PurchaseID = 9006 },
                        new { ID = 90062, Amount = 8, ProductID = 1022, PurchaseID = 9006 },
                        new { ID = 90070, Amount = 5, ProductID = 1013, PurchaseID = 9007 },
                        new { ID = 90071, Amount = 7, ProductID = 1009, PurchaseID = 9007 },
                        new { ID = 90072, Amount = 6, ProductID = 1046, PurchaseID = 9007 },
                        new { ID = 90080, Amount = 3, ProductID = 1017, PurchaseID = 9008 },
                        new { ID = 90081, Amount = 3, ProductID = 1046, PurchaseID = 9008 },
                        new { ID = 90082, Amount = 8, ProductID = 1017, PurchaseID = 9008 },
                        new { ID = 90090, Amount = 4, ProductID = 1036, PurchaseID = 9009 },
                        new { ID = 90091, Amount = 9, ProductID = 1044, PurchaseID = 9009 },
                        new { ID = 90092, Amount = 6, ProductID = 1017, PurchaseID = 9009 },
                        new { ID = 90100, Amount = 4, ProductID = 1039, PurchaseID = 9010 },
                        new { ID = 90101, Amount = 3, ProductID = 1030, PurchaseID = 9010 },
                        new { ID = 90102, Amount = 2, ProductID = 1037, PurchaseID = 9010 },
                        new { ID = 90110, Amount = 1, ProductID = 1010, PurchaseID = 9011 },
                        new { ID = 90111, Amount = 8, ProductID = 1026, PurchaseID = 9011 },
                        new { ID = 90112, Amount = 7, ProductID = 1009, PurchaseID = 9011 },
                        new { ID = 90120, Amount = 2, ProductID = 1013, PurchaseID = 9012 },
                        new { ID = 90121, Amount = 8, ProductID = 1019, PurchaseID = 9012 },
                        new { ID = 90122, Amount = 8, ProductID = 1010, PurchaseID = 9012 },
                        new { ID = 90130, Amount = 1, ProductID = 1040, PurchaseID = 9013 },
                        new { ID = 90131, Amount = 6, ProductID = 1016, PurchaseID = 9013 },
                        new { ID = 90132, Amount = 4, ProductID = 1009, PurchaseID = 9013 },
                        new { ID = 90140, Amount = 4, ProductID = 1042, PurchaseID = 9014 },
                        new { ID = 90141, Amount = 8, ProductID = 1049, PurchaseID = 9014 },
                        new { ID = 90142, Amount = 7, ProductID = 1039, PurchaseID = 9014 },
                        new { ID = 90150, Amount = 9, ProductID = 1041, PurchaseID = 9015 },
                        new { ID = 90151, Amount = 4, ProductID = 1032, PurchaseID = 9015 },
                        new { ID = 90152, Amount = 1, ProductID = 1030, PurchaseID = 9015 },
                        new { ID = 90160, Amount = 9, ProductID = 1011, PurchaseID = 9016 },
                        new { ID = 90161, Amount = 1, ProductID = 1039, PurchaseID = 9016 },
                        new { ID = 90162, Amount = 9, ProductID = 1023, PurchaseID = 9016 },
                        new { ID = 90170, Amount = 5, ProductID = 1006, PurchaseID = 9017 },
                        new { ID = 90171, Amount = 2, ProductID = 1002, PurchaseID = 9017 },
                        new { ID = 90172, Amount = 2, ProductID = 1001, PurchaseID = 9017 },
                        new { ID = 90180, Amount = 8, ProductID = 1024, PurchaseID = 9018 },
                        new { ID = 90181, Amount = 1, ProductID = 1011, PurchaseID = 9018 },
                        new { ID = 90182, Amount = 3, ProductID = 1004, PurchaseID = 9018 },
                        new { ID = 90190, Amount = 2, ProductID = 1011, PurchaseID = 9019 },
                        new { ID = 90191, Amount = 2, ProductID = 1009, PurchaseID = 9019 },
                        new { ID = 90192, Amount = 3, ProductID = 1021, PurchaseID = 9019 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Rating", b =>
                {
                    b.Property<int>("ProductID");

                    b.Property<string>("UserID");

                    b.Property<int>("ID");

                    b.Property<int>("ProductRating");

                    b.HasKey("ProductID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("Rating");

                    b.HasData(
                        new { ProductID = 1007, UserID = "rt_7000", ID = 7000, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7001", ID = 7001, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7002", ID = 7002, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7003", ID = 7003, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7004", ID = 7004, ProductRating = 5 },
                        new { ProductID = 1007, UserID = "rt_7005", ID = 7005, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7006", ID = 7006, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7007", ID = 7007, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7008", ID = 7008, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7009", ID = 7009, ProductRating = 5 },
                        new { ProductID = 1007, UserID = "rt_7010", ID = 7010, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7011", ID = 7011, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7012", ID = 7012, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7013", ID = 7013, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7014", ID = 7014, ProductRating = 5 },
                        new { ProductID = 1007, UserID = "rt_7015", ID = 7015, ProductRating = 1 },
                        new { ProductID = 1007, UserID = "rt_7016", ID = 7016, ProductRating = 2 },
                        new { ProductID = 1007, UserID = "rt_7017", ID = 7017, ProductRating = 3 },
                        new { ProductID = 1007, UserID = "rt_7018", ID = 7018, ProductRating = 4 },
                        new { ProductID = 1007, UserID = "rt_7019", ID = 7019, ProductRating = 5 },
                        new { ProductID = 111, UserID = "admin_ID_123456789", ID = 16, ProductRating = 1 }
                    );
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Contact");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("Phone");

                    b.Property<string>("Website");

                    b.HasKey("ID");

                    b.ToTable("Supplier");

                    b.HasData(
                        new { ID = 11, Address = "lilach 99", Contact = "gil", Email = "gil@ziv.com", Name = "Guro", Phone = "054-9999999", Website = "www.anshubi.com" },
                        new { ID = 12, Address = "Aviv 99", Contact = "Zil", Email = "Ziv@Giv.com", Name = "Theuro", Phone = "054-9999199", Website = "www.tuna.com" }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Cart", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.CartItem", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Product", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Category", "PrimaryCategory")
                        .WithMany()
                        .HasForeignKey("PrimaryCategoryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.ProductSupplier", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Purchase", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.ApplicationUser", "User")
                        .WithMany("Purchases")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("OtoSpaMVC.Models.PurchaseItem", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.Purchase", "Purchase")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("OtoSpaMVC.Models.Rating", b =>
                {
                    b.HasOne("OtoSpaMVC.Models.Product", "Product")
                        .WithMany("ProductRatings")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("OtoSpaMVC.Models.ApplicationUser", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
